<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风大，进来说</title>
  
  
  <link href="https://spencedou.github.io/atom.xml" rel="self"/>
  
  <link href="https://spencedou.github.io/"/>
  <updated>2022-09-20T03:40:23.074Z</updated>
  <id>https://spencedou.github.io/</id>
  
  <author>
    <name>SpenceDou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>支付宝扫码支付实现</title>
    <link href="https://spencedou.github.io/2022/09/20/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98%E5%AE%9E%E7%8E%B0/"/>
    <id>https://spencedou.github.io/2022/09/20/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-09-20T02:48:09.000Z</published>
    <updated>2022-09-20T03:40:23.074Z</updated>
    
    <content type="html"><![CDATA[<p><code>前言：</code>在一次项目开发中我的业务模块涉及<a href="https://blog.csdn.net/D_ps19990501/article/details/122856720">微信扫码支付</a>和支付宝扫码支付。在查阅现有技术性文章后发现，许多文章并不能走通，于是我便阅读了官方文档，形成了这篇总结性文章，希望对读者有所帮助。</p><p><a href="https://www.alipay.com/">支付宝平台</a><br><a href="https://developers.alipay.com/">支付宝开发者中心</a><br><a href="https://open.alipay.com/">支付宝开放平台</a><br><a href="https://opendocs.alipay.com/open/194">API开发文档</a><br><a href="https://github.com/alipay/alipay-easysdk/tree/master/java">官方demo-easySDK</a></p><h2 id="支付宝平台信息配置"><a href="#支付宝平台信息配置" class="headerlink" title="支付宝平台信息配置"></a>支付宝平台信息配置</h2><p>相信查询此刻你一定已经注册登陆过<a href="https://www.alipay.com/">支付宝平台</a>了，在此不多赘述。需在平台中获取的开发所需信息如下：</p><p><code>APPID</code>：应用APPID（小程序|小程序插件|小程序模板|网页&amp;移动应用|生活号）</p><p><code>ALIPAY_PUBLIC_KEY</code>：支付宝公钥</p><p><code>MERCHANT_PRIVATE_KEY</code>：应用私钥</p><p><code>SIGN_TYPE</code>：签名类型，Alipay Easy SDK只推荐使用RSA2，估此处固定填写<code>RSA2</code></p><p><code>GATEWAYHOST</code>：网关域名，线上为：openapi.alipay.com，沙箱为：openapi.alipaydev.com</p><h3 id="关于沙箱环境说明"><a href="#关于沙箱环境说明" class="headerlink" title="关于沙箱环境说明"></a>关于沙箱环境说明</h3><p><code>沙箱环境</code>和<code>线上环境</code>在<strong>代码书写上还好，除了接口请求地址几乎没有差别</strong>，但是在平台配置上差距可是老大了。等于说，沙箱环境不论你是个人账号还是商户账号，只要你申请了沙箱测试环境以上所需的核心参数就直接给你提供了。沙箱工具位置：登录<a href="https://developers.alipay.com/">支付宝开发者中心</a>，依次点击：<code>控制台</code>→<code>沙箱</code>，就到了沙箱环境的控制台。</p><p><img src="http://qn.mfei.fun/img/AK%6058(%60J5%5DLI$N(S)IO%7DTBD.png" alt="img"></p><p>进入沙箱环境后，上面列出的商户参数信息一应俱全</p><p><img src="http://qn.mfei.fun/img/image-20220920111743828.png" alt="image-20220920111743828"></p><p><code>注意：</code></p><ol><li><code>沙箱应用</code>页面中的<code>沙箱环境</code>→<code>沙箱应用</code>→<code>开发信息</code>中的接口加签方式在此使用推荐的<code>自定义密钥</code>→<code>RSA2密钥</code></li><li>需要手动进入<a href="https://open.alipay.com/svr/ability/get">能力管理</a>页面点击<code>获取更多能力</code>获取所需能力</li></ol><h3 id="申请支付产品"><a href="#申请支付产品" class="headerlink" title="申请支付产品"></a>申请支付产品</h3><ol><li><p>登录<a href="https://www.alipay.com/">支付宝平台</a>（此时需要商户账号，或者需要管理权限），选择<code>我是商家用户</code>→<code>我是 支付宝/口碑 商家</code>，选择要登录的账号（此时选择商户的账号）</p><p><img src="http://qn.mfei.fun/img/image-20220920113327733.png" alt="image-20220920113327733"></p></li><li><p>找到<code>产品中心</code>，选择<code>当面付</code>，<code>立即开通</code>，此时需要甲方提供：营业执照、网站链接、授权函等信息（缺啥要啥就对了）。</p></li><li><p>提交后等待审核。</p></li></ol><h3 id="获取应用AppID"><a href="#获取应用AppID" class="headerlink" title="获取应用AppID"></a>获取应用AppID</h3><ol><li><p>登录<a href="https://open.alipay.com/">支付宝开放平台</a>（此时需要商户账号，或者需要管理权限），在控制台页面，查看<code>我的应用</code>，我本次开发甲方提供的是<code>网页&amp;移动应用</code></p><p><img src="http://qn.mfei.fun/img/image-20220920113425262.png" alt="image-20220920113425262"></p></li><li><p>登录<a href="https://www.alipay.com/">支付宝平台</a></p></li><li><p>进入后依次点击：<code>账号中心</code>→<code>APPID绑定</code>→<code>添加绑定</code>，输入要绑定的APPID，然后联系商户手机验证码验证即可。</p></li></ol><p><code>补充：</code>以上步骤仅供参考，你的开发过程中可能有各种需要甲方配合的地方，这个要视情况要求甲方配合，比如我在开发过程中甲方信息不完善，甚至连营业执照、公司logo、公司类型等这些基本信息都没上传。</p><h3 id="获取支付宝公钥-amp-私钥"><a href="#获取支付宝公钥-amp-私钥" class="headerlink" title="获取支付宝公钥&amp;私钥"></a>获取支付宝公钥&amp;私钥</h3><ol><li><p>登录<a href="https://open.alipay.com/">支付宝开放平台</a>（此时需要商户账号，或者需要管理权限），在控制台页面，查看<code>我的应用</code>，点击进入应用</p><p><img src="http://qn.mfei.fun/img/97%5DF6F%5DI%60%7BK$%5D%7BMB%7B3X19CA.png" alt="img"></p></li><li><p>进入应用信息页找到<code>应用信息</code>，在此页面<code>开发信息</code>中设置密钥，可以选择<a href="https://miniu.alipay.com/keytool/create">线上生成密钥</a>，也可选择下载支付宝官方平台工具（本人选择的是<a href="https://gw.alipayobjects.com/os/bmw-prod/0e6297a2-89b9-4cab-972b-f9534ba07082.exe">下载工具</a>）</p><p><img src="http://qn.mfei.fun/img/image-20220920113607153.png" alt="image-20220920113607153"></p></li></ol><h2 id="代码中的配置"><a href="#代码中的配置" class="headerlink" title="代码中的配置"></a>代码中的配置</h2><p>主要参考 <a href="https://opendocs.alipay.com/open/194">API开发文档</a> &amp; <a href="https://github.com/alipay/alipay-easysdk/tree/master/java">官方demo</a></p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>此处引入了<code>easysdk</code>工具</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.alipay.sdk&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;alipay-easysdk&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">2.2</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.alipay.sdk&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;alipay-sdk-java&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">4.22</span><span class="number">.0</span>.ALL&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置请求参数实体类"><a href="#配置请求参数实体类" class="headerlink" title="配置请求参数实体类"></a>配置请求参数实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayNotifyParam</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String appId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付宝交易凭证号</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String tradeNo;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 原支付请求的商户订单号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String outTradeNo;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商户业务ID，主要是退款通知中返回退款申请的流水号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String outBizNo;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 买家支付宝账号对应的支付宝唯一用户号。以2088开头的纯16位数字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String buyerId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 买家支付宝账号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String buyerLogonId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 卖家支付宝用户号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String sellerId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 卖家支付宝账号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String sellerEmail;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交易目前所处的状态，见交易状态说明</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String tradeStatus;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本次交易支付的订单金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal totalAmount;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商家在交易中实际收到的款项</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal receiptAmount;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户在交易中支付的金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal buyerPayAmount;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退款通知中，返回总退款金额，单位为元，支持两位小数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal refundFee;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品的标题/交易标题/订单标题/订单关键字等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String subject;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该订单的备注、描述、明细等。对应请求时的body参数，原样通知回来</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String body;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该笔交易创建的时间。格式为yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date gmtCreate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该笔交易的买家付款时间。格式为yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date gmtPayment;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该笔交易的退款时间。格式为yyyy-MM-dd HH:mm:ss.S</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date gmtRefund;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该笔交易结束时间。格式为yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date gmtClose;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付成功的各个渠道金额信息,array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String fundBillList;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公共回传参数，如果请求时传递了该参数，则返回给商户时会在异步通知时将该参数原样返回。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String passbackParams;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置支付工具类"><a href="#配置支付工具类" class="headerlink" title="配置支付工具类"></a>配置支付工具类</h3><p>此工具类仅供参考，配置信息也可根据个人喜好放在yml文件中（为方便阅读此处放在类中作为常量）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APPID</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MERCHANT_PRIVATE_KEY</span> <span class="operator">=</span> <span class="string">&quot;私钥内容&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ALIPAY_PUBLIC_KEY</span> <span class="operator">=</span> <span class="string">&quot;公钥内容&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NOTIFY_URL</span> <span class="operator">=</span> <span class="string">&quot;回调地址&quot;</span>;</span><br><span class="line">    <span class="comment">// 签名类型，Alipay Easy SDK只推荐使用RSA2，估此处固定填写RSA2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SIGN_TYPE</span> <span class="operator">=</span> <span class="string">&quot;RSA2&quot;</span>;</span><br><span class="line">    <span class="comment">// 请求使用的编码格式，如utf-8,gbk,gb2312等</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CHARSET</span> <span class="operator">=</span> <span class="string">&quot;utf-8&quot;</span>;</span><br><span class="line">    <span class="comment">// 主机域名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GATEWAYHOST</span> <span class="operator">=</span> <span class="string">&quot;openapi.alipay.com&quot;</span>;</span><br><span class="line">    <span class="comment">// 请求协议</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROTOCOL</span> <span class="operator">=</span> <span class="string">&quot;https&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> Spence_Dou</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 配置请求配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 16:49 2021/12/29</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.alipay.8.kernel.Config</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Config <span class="title function_">getOptions</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.protocol = PROTOCOL;</span><br><span class="line">        config.gatewayHost = GATEWAYHOST;</span><br><span class="line">        config.signType = SIGN_TYPE;</span><br><span class="line">        config.appId = APPID;</span><br><span class="line">        config.merchantPrivateKey = AlipayUtil.MERCHANT_PRIVATE_KEY;</span><br><span class="line">        <span class="comment">// 如果采用非证书模式，则无需赋值三个证书路径，改为赋值如下的支付宝公钥字符串即可</span></span><br><span class="line">        config.alipayPublicKey = AlipayUtil.ALIPAY_PUBLIC_KEY;</span><br><span class="line">        <span class="comment">//可设置异步通知接收服务地址（可选）</span></span><br><span class="line">         config.notifyUrl = NOTIFY_URL;</span><br><span class="line">        <span class="comment">//可设置AES密钥，调用AES加解密相关接口时需要（可选）</span></span><br><span class="line">        <span class="comment">// 32位，需要的话直接生成随机字符串，需要在商户平台配置，位置在证书那一块</span></span><br><span class="line">        config.encryptKey = <span class="string">&quot;*********&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> Spence_Dou</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 生成订单号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 22:05 2021/12/28</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">orderNo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString()</span><br><span class="line">                .replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                .substring(<span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> Spence_Dou</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 将request中的参数转为Map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 18:01 2021/12/29</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> request 回调请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.Map&lt;java.lang.String,java.lang.String&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title function_">convertRequestParamsToMap</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        HashMap&lt;String, String&gt; retMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Map.Entry&lt;String, String[]&gt;&gt; entrySet = request.getParameterMap().entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String[]&gt; entry : entrySet)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            String[] values = entry.getValue();</span><br><span class="line">            <span class="type">int</span> <span class="variable">valLen</span> <span class="operator">=</span> values.length;</span><br><span class="line">            <span class="keyword">if</span> (valLen == <span class="number">1</span>)&#123;</span><br><span class="line">                retMap.put(name, values[<span class="number">0</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (valLen &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="keyword">for</span> (String val : values)&#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;,&quot;</span>).append(val);</span><br><span class="line">                &#125;</span><br><span class="line">                retMap.put(name, sb.toString().substring(<span class="number">1</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                retMap.put(name, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> Spence_Dou</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 校验AppID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 20:32 2021/12/29</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> params 回调信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">(Map&lt;String, String&gt; params)</span> <span class="keyword">throws</span> AlipayApiException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!params.get(<span class="string">&quot;app_id&quot;</span>).equals(APPID)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AlipayApiException</span>(<span class="string">&quot;app_id不一致&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> Spence_Dou</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 生成请求实体类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 17:51 2022/2/12</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> params 响应体参数转map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> marchsoft.modules.spiritdeerpush.common.utils.pay.alipay.AlipayNotifyParam</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AlipayNotifyParam <span class="title function_">buildAlipayNotifyParam</span><span class="params">(Map&lt;String, String&gt; params)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(params);</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(json, AlipayNotifyParam.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支付请求"><a href="#支付请求" class="headerlink" title="支付请求"></a>支付请求</h3><p>不同的产品功能应参考<a href="https://github.com/alipay/alipay-easysdk/tree/master/java">官方demo-easySDK</a>，此处以面对面支付为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成系统订单号</span></span><br><span class="line"><span class="type">String</span> <span class="variable">outTradeNo</span> <span class="operator">=</span> AlipayUtil.orderNo();</span><br><span class="line"><span class="comment">// 1. 设置参数（全局只需设置一次）</span></span><br><span class="line">Factory.setOptions(AlipayUtil.getOptions());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 2. 发起API调用，description: 商品描述; total: 金额（元）</span></span><br><span class="line"><span class="comment">// 响应的 response 都有哪些参数，自己去看文档，太多了不一一描述</span></span><br><span class="line"><span class="type">AlipayTradePrecreateResponse</span> <span class="variable">response</span> <span class="operator">=</span> Factory.Payment.FaceToFace()</span><br><span class="line">.preCreate(description, outTradeNo, total.toString());</span><br><span class="line"><span class="comment">// 3. 处理响应或异常</span></span><br><span class="line"><span class="keyword">if</span> (ResponseChecker.success(response)) &#123;</span><br><span class="line"><span class="comment">// 付款二维码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">qrCode</span> <span class="operator">=</span> response.getQrCode();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在此可进行订单信息入库等业务逻辑操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.err.println(<span class="string">&quot;调用失败，原因：&quot;</span> + response.msg + <span class="string">&quot;，&quot;</span> + response.subMsg);</span><br><span class="line"><span class="comment">// 此处自定义抛出异常为公司框架所封装</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadRequestException</span>(response.msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.err.println(<span class="string">&quot;调用遭遇异常，原因：&quot;</span> + e.getMessage());</span><br><span class="line"><span class="comment">// 手动关闭事务</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e.getMessage(), e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回调接口"><a href="#回调接口" class="headerlink" title="回调接口"></a>回调接口</h3><p>此接口地址对应支付请求时的请求参数notify_url，具体功能介绍在此不做阐述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将request中的参数转为Map</span></span><br><span class="line">Map&lt;String, String&gt; stringStringMap = AlipayUtil.convertRequestParamsToMap(request);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 调用SDK验证签名</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">signVerified</span> <span class="operator">=</span> AlipaySignature.rsaCheckV1(stringStringMap, AlipayUtil.ALIPAY_PUBLIC_KEY, AlipayUtil.CHARSET, AlipayUtil.SIGN_TYPE);</span><br><span class="line"><span class="keyword">if</span> (signVerified)&#123;</span><br><span class="line">AlipayUtil.check(stringStringMap);</span><br><span class="line"><span class="type">AlipayNotifyParam</span> <span class="variable">param</span> <span class="operator">=</span> AlipayUtil.buildAlipayNotifyParam(stringStringMap);</span><br><span class="line"><span class="comment">// 订单状态</span></span><br><span class="line"><span class="type">String</span> <span class="variable">trade_status</span> <span class="operator">=</span> param.getTradeStatus();</span><br><span class="line"><span class="comment">// 支付成功</span></span><br><span class="line"><span class="keyword">if</span> (trade_status.equals(<span class="string">&quot;TRADE_SUCCESS&quot;</span>)</span><br><span class="line">|| trade_status.equals(<span class="string">&quot;TRADE_FINISHED&quot;</span>))&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在此可进行订单信息维护等业务逻辑操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 此处自定义抛出异常为公司框架所封装</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadRequestException</span>(<span class="string">&quot;支付失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 不明白 failure 啥意思的话去看文档</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;failure&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (AlipayApiException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="comment">//强制手动事务回滚</span></span><br><span class="line">TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;failure&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;前言：&lt;/code&gt;在一次项目开发中我的业务模块涉及&lt;a href=&quot;https://blog.csdn.net/D_ps19990501/article/details/122856720&quot;&gt;微信扫码支付&lt;/a&gt;和支付宝扫码支付。在查阅现有技术性文章后发现，许</summary>
      
    
    
    
    <category term="三方对接" scheme="https://spencedou.github.io/categories/%E4%B8%89%E6%96%B9%E5%AF%B9%E6%8E%A5/"/>
    
    
    <category term="支付宝" scheme="https://spencedou.github.io/tags/%E6%94%AF%E4%BB%98%E5%AE%9D/"/>
    
    <category term="支付" scheme="https://spencedou.github.io/tags/%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>微信扫码支付实现</title>
    <link href="https://spencedou.github.io/2022/09/20/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98%E5%AE%9E%E7%8E%B0/"/>
    <id>https://spencedou.github.io/2022/09/20/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-09-20T02:47:50.000Z</published>
    <updated>2022-09-20T03:40:23.073Z</updated>
    
    <content type="html"><![CDATA[<p><code>前言：</code>在一次项目开发中我的业务模块涉及微信扫码支付和<a href="https://blog.csdn.net/D_ps19990501/article/details/122870559">支付宝扫码支付</a>。在查阅现有文档后发现，大部分文章还停留在V2支付，部分文章介绍了V3支付但是并不能走通，于是我便阅读了官方文档，形成了这篇总结性文章，希望对读者有所帮助。</p><p><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter2_7_2.shtml">官方开发文档</a><br><a href="https://github.com/wechatpay-apiv3/wechatpay-apache-httpclient">官方SDK开发工具包</a><br><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_1.shtml">API字典</a></p><h2 id="微信平台信息配置"><a href="#微信平台信息配置" class="headerlink" title="微信平台信息配置"></a>微信平台信息配置</h2><p>相信此刻你一定已经注册并登陆过 <a href="https://pay.weixin.qq.com/index.php/core/home/login">微信开放平台</a> 了，在此不多赘述。需在平台中获取的开发所需信息如下：</p><p><code>MERCHANT_ID</code>：商户号<br><code>MERCHANT_SERIAL_NUMBER</code>：商户<a href="https://so.csdn.net/so/search?q=API&spm=1001.2101.3001.7020">API</a>证书的证书序列号<br><code>MERCHANT_PRIVATEKEY</code>：商户API<a href="https://so.csdn.net/so/search?q=%E7%A7%81%E9%92%A5&spm=1001.2101.3001.7020">私钥</a><br><code>AIV3KEY</code>：API v3密钥<br><code>APP_ID</code>：小程序的APPID</p><p><strong>注意</strong>：想要获取以上信息，必须是商户主账号才可以（即便是管理员，部分操作也无法完成）。<br><code>下面我们来逐个获取以上参数</code></p><h3 id="获取商户号"><a href="#获取商户号" class="headerlink" title="获取商户号"></a>获取商户号</h3><ol><li><p>登录微信开放平台</p></li><li><p>如果是主账号，如图红框位置即为商户号。如果不是商户主帐号，显示的则为个人帐号（如图为子管理员账号）<img src="http://qn.mfei.fun/img/image-20220920105144822.png" alt="image-20220920105144822"></p></li><li><p>如果登陆账号不是主账号，则需要依次点击<code>产品中心</code>→<code>AppID账号管理</code>→<code>+关联AppID</code>，此时即可看到商户号<img src="http://qn.mfei.fun/img/image-20220920105304787.png" alt="image-20220920105304787"></p></li></ol><h3 id="获取证书序列号"><a href="#获取证书序列号" class="headerlink" title="获取证书序列号"></a>获取证书序列号</h3><p><code>该步骤操作需要商户主账号才可完成。</code></p><ol><li>依次点击<code>账户中心</code>→<code>API安全</code>，此时就进入了API安全页，此页面可设置一个证书两个密钥，API证书是根据网站提供的工具生成的（具体下载操作可参考网站中给出的指引）</li></ol><p><img src="http://qn.mfei.fun/img/image-20220920105436865.png" alt="image-20220920105436865"></p><ol start="2"><li><p>对微信工具生成的文件进行解压缩得到如下信息，后续操作可根据’<code>证书使用说明.txt</code>进行（提示一下：Windows用户直接双击<code>apiclient_cert.p12</code>文件即可上传证书）。</p><p><img src="http://qn.mfei.fun/img/image-20220920105620364.png" alt="image-20220920105620364"></p></li><li><p>在根据网站指引完成了API证书上传后，商户主账号就可直接点击<code>管理证书</code>查看证书序列号。</p><p><img src="http://qn.mfei.fun/img/image-20220920105701828.png" alt="image-20220920105701828"></p></li></ol><h3 id="获取API私钥"><a href="#获取API私钥" class="headerlink" title="获取API私钥"></a>获取API私钥</h3><p>在获取证书序列号的第二步操作中的<code>apiclient_key.pem</code>文件即为所需的商户API私钥。</p><p><img src="http://qn.mfei.fun/img/image-20220920105751973.png" alt="image-20220920105751973"></p><p><strong>注意</strong>：此处有一个小坑，在粘贴复制密钥时，除了保留<code>-----BEGIN PRIVATE KEY-----</code>和<code>-----END PRIVATE KEY-----</code>的换行外，中间内容在粘贴时一定要去除复制时产生的换行符（推荐复制内容后去网上的<code>去换行工具</code>中去除下换行符）</p><p><img src="http://qn.mfei.fun/img/image-20220920105839862.png" alt="image-20220920105839862"></p><h3 id="获取APIv3密钥"><a href="#获取APIv3密钥" class="headerlink" title="获取APIv3密钥"></a>获取APIv3密钥</h3><ol><li><p>依旧是在API安全页，直接点击<code>设置</code>来设置APIv3密钥即可。</p><p><img src="http://qn.mfei.fun/img/image-20220920105919903.png" alt="image-20220920105919903"></p><p><img src="http://qn.mfei.fun/img/image-20220920110022358.png" alt="image-20220920110022358"></p></li><li><p>APIv3密钥要求是<code>32个字符，支持数字/大小写字母</code>，可以在随机生成字符串的线上工具中进行生成</p><p><img src="http://qn.mfei.fun/img/image-20220920110118699.png" alt="image-20220920110118699"></p></li><li><p>将上一步生成的密钥复制粘贴，完成手机号验证码安全认证即可完成APIv3密钥的设置</p><p><img src="http://qn.mfei.fun/img/image-20220920110208295.png" alt="image-20220920110208295"></p></li></ol><h3 id="获取并绑定APPID"><a href="#获取并绑定APPID" class="headerlink" title="获取并绑定APPID"></a>获取并绑定APPID</h3><p><code>公众号和小程序的AppID获取方式雷同，具体参考如图所示指引</code></p><p><img src="http://qn.mfei.fun/img/image-20220920110308848.png" alt="image-20220920110308848"></p><ol><li><p>登录<a href="https://mp.weixin.qq.com/">微信公众平台</a>，依次点击<code>设置</code>→<code>基本设置</code>，页面最下方账号信息处即可看到<code>AppID（小程序ID）</code></p><p><img src="http://qn.mfei.fun/img/image-20220920110345880.png" alt="image-20220920110345880"></p></li><li><p>在微信公众平台，依次点击<code>设置</code>→<code>基本设置</code>，找到<code>主体信息</code></p><p><img src="http://qn.mfei.fun/img/image-20220920110414964.png" alt="image-20220920110414964"></p></li><li><p>回到<a href="https://pay.weixin.qq.com/index.php/core/home/login">微信开放平台</a>，依次点击<code>产品中心</code>→<code>AppID账号管理</code>→<code>+关联AppID</code>，将上一步获取到的<code>AppID</code>和<code>主体信息</code>粘贴在此并提交</p><p><img src="http://qn.mfei.fun/img/63%7DY%5DE4%7B%60~BJ%5DA_0SQXM5WO.png" alt="img"></p></li><li><p>回到微信公众平台授权即可</p><p><img src="http://qn.mfei.fun/img/6R8XM6VGU1VD0D%4HIP%7D8$V.png" alt="img"></p></li></ol><h3 id="开通支付产品"><a href="#开通支付产品" class="headerlink" title="开通支付产品"></a>开通支付产品</h3><ol><li><p>登录微信开放平台，来到<code>产品中心</code>页面。</p></li><li><p>开启支付产品中的<code>Native支付</code>(扫码支付)功能。</p></li><li><p>开启运营工具中的<code>企业付款到零钱</code>(付款资金直接进入微信零钱，提现方式根据用户需求来开通不同产品即可)。</p><p><img src="http://qn.mfei.fun/img/image-20220920110605286.png" alt="image-20220920110605286"></p></li></ol><h2 id="代码中的配置"><a href="#代码中的配置" class="headerlink" title="代码中的配置"></a>代码中的配置</h2><p>对于v3支付来说，此时可谓万事俱备只欠东风，下面来配置代码中的工具类和第三方请求。</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>此处引入的是<code>v3支付</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.wechatpay-apiv3&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;wechatpay-apache-httpclient&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.3</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置微信工具类"><a href="#配置微信工具类" class="headerlink" title="配置微信工具类"></a>配置微信工具类</h3><p>此工具类仅供参考，配置信息也可根据个人喜好放在yml文件中（为方便阅读此处放在类中作为常量）。<br><code>此处的工具类有以下作用：</code></p><ol><li>配置商户信息</li><li>微信接口请求所需工具方法</li><li>微信验签</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeChartUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MERCHANT_ID</span> <span class="operator">=</span> <span class="string">&quot;商户id&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MERCHANT_SERIAL_NUMBER</span> <span class="operator">=</span> <span class="string">&quot;证书序列号&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MERCHANT_PRIVATEKEY</span> <span class="operator">=</span> <span class="string">&quot;-----BEGIN PRIVATE KEY-----\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;你的密钥内容（记得去换行）&quot;</span> +</span><br><span class="line">  <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;-----END PRIVATE KEY-----&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AIV3KEY</span> <span class="operator">=</span> <span class="string">&quot;APIv3密钥&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NOTIFY_URL</span> <span class="operator">=</span> <span class="string">&quot;回调地址&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APP_ID</span> <span class="operator">=</span> <span class="string">&quot;小程序的AppID&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> Spence_Dou</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 生成订单号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 11:35 2021/12/23</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">orderNo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString()</span><br><span class="line">                .replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                .substring(<span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> Spence_Dou</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 生成订单过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 11:41 2021/12/23</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.time.LocalDateTime</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">timeExpire</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//过期时间：5分钟后</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">5</span>*<span class="number">60</span>*<span class="number">1000</span>;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ssXXX&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="comment">//30分钟后的时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">afterDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(now.getTime() + time);</span><br><span class="line">        <span class="keyword">return</span> simpleDateFormat.format(afterDate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> Spence_Dou</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 分转元 保留小数点后两位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 11:38 2021/12/23</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> num 转换金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title function_">transition</span><span class="params">(Integer num)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">bigDecimal1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(num + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">bigDecimal2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;100.00&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bigDecimal1.divide(bigDecimal2).setScale(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> Spence_Dou</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 微信支付回调签名验证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 16:30 2021/12/23</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> serial 请求头序列号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> message 请求报文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> signature 签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">signVerify</span><span class="params">(String serial, String message, String signature)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PrivateKey</span> <span class="variable">key</span> <span class="operator">=</span> PemUtil.loadPrivateKey(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(MERCHANT_PRIVATEKEY.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">            <span class="type">ScheduledUpdateCertificatesVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScheduledUpdateCertificatesVerifier</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">WechatPay2Credentials</span>(MERCHANT_ID, <span class="keyword">new</span> <span class="title class_">PrivateKeySigner</span>(MERCHANT_SERIAL_NUMBER, key)),</span><br><span class="line">                    AIV3KEY.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            <span class="keyword">return</span> verifier.verify(serial, message.getBytes(StandardCharsets.UTF_8), signature);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> Spence_Dou</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 解密密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 17:04 2021/12/23</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> body 请求数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decryptOrder</span><span class="params">(String body)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">AesUtil</span> <span class="variable">util</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesUtil</span>(AIV3KEY.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">            <span class="type">JsonNode</span> <span class="variable">node</span> <span class="operator">=</span> objectMapper.readTree(body);</span><br><span class="line">            <span class="type">JsonNode</span> <span class="variable">resource</span> <span class="operator">=</span> node.get(<span class="string">&quot;resource&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">ciphertext</span> <span class="operator">=</span> resource.get(<span class="string">&quot;ciphertext&quot;</span>).textValue();</span><br><span class="line">            <span class="type">String</span> <span class="variable">associatedData</span> <span class="operator">=</span> resource.get(<span class="string">&quot;associated_data&quot;</span>).textValue();</span><br><span class="line">            <span class="type">String</span> <span class="variable">nonce</span> <span class="operator">=</span> resource.get(<span class="string">&quot;nonce&quot;</span>).textValue();</span><br><span class="line">            <span class="keyword">return</span> util.decryptToString(associatedData.getBytes(StandardCharsets.UTF_8), nonce.getBytes(StandardCharsets.UTF_8), ciphertext);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | GeneralSecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> Spence_Dou</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 关闭订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 17:34 2021/12/23</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> outTradeNo 订单号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeOrder</span><span class="params">(String outTradeNo)</span> &#123;</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">key</span> <span class="operator">=</span> PemUtil.loadPrivateKey(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(MERCHANT_PRIVATEKEY.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用定时更新的签名验证器，不需要传入证书</span></span><br><span class="line">        <span class="type">ScheduledUpdateCertificatesVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScheduledUpdateCertificatesVerifier</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">WechatPay2Credentials</span>(MERCHANT_ID, <span class="keyword">new</span> <span class="title class_">PrivateKeySigner</span>(MERCHANT_SERIAL_NUMBER, key)),</span><br><span class="line">                AIV3KEY.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">        <span class="type">WechatPayHttpClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> WechatPayHttpClientBuilder.create()</span><br><span class="line">                .withMerchant(MERCHANT_ID, MERCHANT_SERIAL_NUMBER, key)</span><br><span class="line">                .withValidator(<span class="keyword">new</span> <span class="title class_">WechatPay2Validator</span>(verifier));</span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> builder.build();</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;https://api.mch.weixin.qq.com/v3/pay/transactions/out-trade-no/&quot;</span>+outTradeNo+<span class="string">&quot;/close&quot;</span>);</span><br><span class="line">        httpPost.addHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        httpPost.addHeader(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">ObjectNode</span> <span class="variable">rootNode</span> <span class="operator">=</span> objectMapper.createObjectNode();</span><br><span class="line">            rootNode.put(<span class="string">&quot;mchid&quot;</span>,MERCHANT_ID);</span><br><span class="line">            objectMapper.writeValue(bos, rootNode);</span><br><span class="line"></span><br><span class="line">            httpPost.setEntity(<span class="keyword">new</span> <span class="title class_">StringEntity</span>(bos.toString(<span class="string">&quot;UTF-8&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">bodyAsString</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">            System.out.println(bodyAsString);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支付请求"><a href="#支付请求" class="headerlink" title="支付请求"></a>支付请求</h3><ul><li>该请求方式参照文章开头提供的SDK开发工具包中的请求方式</li><li>不同的产品应参考 <a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_1.shtml">API字典</a> 请求不同的地址，此处以<code>Native支付</code>为例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrivateKey</span> <span class="variable">key</span> <span class="operator">=</span> PemUtil.loadPrivateKey(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(WeChartUtil.MERCHANT_PRIVATEKEY.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line"><span class="comment">// 使用定时更新的签名验证器，不需要传入证书</span></span><br><span class="line"><span class="type">ScheduledUpdateCertificatesVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScheduledUpdateCertificatesVerifier</span>(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">WechatPay2Credentials</span>(WeChartUtil.MERCHANT_ID, <span class="keyword">new</span> <span class="title class_">PrivateKeySigner</span>(WeChartUtil.MERCHANT_SERIAL_NUMBER, key)),</span><br><span class="line">WeChartUtil.AIV3KEY.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line"><span class="type">WechatPayHttpClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> WechatPayHttpClientBuilder.create()</span><br><span class="line">.withMerchant(WeChartUtil.MERCHANT_ID, WeChartUtil.MERCHANT_SERIAL_NUMBER, key)</span><br><span class="line">.withValidator(<span class="keyword">new</span> <span class="title class_">WechatPay2Validator</span>(verifier));</span><br><span class="line"><span class="comment">// 通过WechatPayHttpClientBuilder构造的HttpClient，会自动的处理签名和验签，并进行证书自动更新</span></span><br><span class="line"><span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> builder.build();</span><br><span class="line"></span><br><span class="line"><span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;https://api.mch.weixin.qq.com/v3/pay/transactions/native&quot;</span>);</span><br><span class="line">httpPost.addHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">httpPost.addHeader(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"><span class="comment">// 生成订单号</span></span><br><span class="line"><span class="type">String</span> <span class="variable">outTradeNo</span> <span class="operator">=</span> WeChartUtil.orderNo();</span><br><span class="line"><span class="comment">// 请求参数</span></span><br><span class="line"><span class="type">ObjectNode</span> <span class="variable">rootNode</span> <span class="operator">=</span> objectMapper.createObjectNode();</span><br><span class="line">rootNode.put(<span class="string">&quot;mchid&quot;</span>,WeChartUtil.MERCHANT_ID)</span><br><span class="line">.put(<span class="string">&quot;appid&quot;</span>, WeChartUtil.APP_ID)</span><br><span class="line">.put(<span class="string">&quot;notify_url&quot;</span>, WeChartUtil.NOTIFY_URL)</span><br><span class="line">.put(<span class="string">&quot;out_trade_no&quot;</span>, outTradeNo)</span><br><span class="line">.put(<span class="string">&quot;time_expire&quot;</span>, WeChartUtil.timeExpire())</span><br><span class="line">.put(<span class="string">&quot;description&quot;</span>, description); <span class="comment">// 订单描述（前端获取）</span></span><br><span class="line">rootNode.putObject(<span class="string">&quot;amount&quot;</span>)</span><br><span class="line">.put(<span class="string">&quot;total&quot;</span>, <span class="number">1</span>); <span class="comment">// 此处支付金额单位为分</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">objectMapper.writeValue(bos, rootNode);</span><br><span class="line">httpPost.setEntity(<span class="keyword">new</span> <span class="title class_">StringEntity</span>(bos.toString(<span class="string">&quot;UTF-8&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"><span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line"><span class="type">String</span> <span class="variable">bodyAsString</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());</span><br><span class="line"><span class="comment">// 这里就是请求支付后返回的数据了</span></span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">details</span> <span class="operator">=</span> JSONObject.parseObject(bodyAsString);</span><br><span class="line"><span class="comment">// 支付二维码</span></span><br><span class="line">String qrCode= details.getString(<span class="string">&quot;code_url&quot;</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此处可进行订单数据持久化等业务操作</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回调接口"><a href="#回调接口" class="headerlink" title="回调接口"></a><a href="https://so.csdn.net/so/search?q=%E5%9B%9E%E8%B0%83&spm=1001.2101.3001.7020">回调</a>接口</h3><ul><li><p>这里就是v3支付和v2支付一个比较明显的区别点，<strong>v2支付的回调地址是在官方网站中配置的，而v3支付中，回调地址是作为请求参数传递到微信的</strong>。</p></li><li><p>此接口地址对应支付请求时的请求参数<code>notify_url</code>，具体功能介绍在此不做阐述</p><p><img src="http://qn.mfei.fun/img/%60N%60T~F0RUGXLA[VRCG[72%Y.png" alt="img"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map <span class="title function_">wxCallback</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line"><span class="type">Map</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">result.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;FAIL&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">signStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">signStr.append(request.getHeader(<span class="string">&quot;Wechatpay-Timestamp&quot;</span>)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">signStr.append(request.getHeader(<span class="string">&quot;Wechatpay-Nonce&quot;</span>)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> request.getReader();</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">while</span> ((str = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">builder.append(str);</span><br><span class="line">&#125;</span><br><span class="line">signStr.append(builder.toString()).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">// 验证签名</span></span><br><span class="line"><span class="keyword">if</span> (!WeChartUtil.signVerify(request.getHeader(<span class="string">&quot;Wechatpay-Serial&quot;</span>), signStr.toString(), request.getHeader(<span class="string">&quot;Wechatpay-Signature&quot;</span>)))&#123;</span><br><span class="line">result.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;sign error&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解密密文</span></span><br><span class="line"><span class="type">String</span> <span class="variable">decryptOrder</span> <span class="operator">=</span> WeChartUtil.decryptOrder(builder.toString());</span><br><span class="line"><span class="comment">// 验证订单</span></span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">details</span> <span class="operator">=</span> JSONObject.parseObject(decryptOrder);</span><br><span class="line"><span class="comment">// 获取订单状态</span></span><br><span class="line"><span class="type">String</span> <span class="variable">ciphertext</span> <span class="operator">=</span> details.getString(<span class="string">&quot;trade_state&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;SUCCESS&quot;</span>.equals(ciphertext))&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此处可进行订单状态数据持久化等业务操作</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">result.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;SUCCESS&quot;</span>);</span><br><span class="line">result.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line"><span class="comment">// 关闭订单</span></span><br><span class="line">WeChartUtil.closeOrder(details.getString(<span class="string">&quot;out_trade_no&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="comment">//强制手动事务回滚</span></span><br><span class="line">TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;前言：&lt;/code&gt;在一次项目开发中我的业务模块涉及微信扫码支付和&lt;a href=&quot;https://blog.csdn.net/D_ps19990501/article/details/122870559&quot;&gt;支付宝扫码支付&lt;/a&gt;。在查阅现有文档后发现，大部分文</summary>
      
    
    
    
    <category term="三方对接" scheme="https://spencedou.github.io/categories/%E4%B8%89%E6%96%B9%E5%AF%B9%E6%8E%A5/"/>
    
    
    <category term="支付" scheme="https://spencedou.github.io/tags/%E6%94%AF%E4%BB%98/"/>
    
    <category term="微信" scheme="https://spencedou.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>状态模式</title>
    <link href="https://spencedou.github.io/2021/04/01/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>https://spencedou.github.io/2021/04/01/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-04-01T02:28:54.000Z</published>
    <updated>2022-09-20T02:38:31.765Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>状态模式（State Pattern）：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。其别名为状态对象（Objects for Status）。简而言之——<code>对象可根据不同情况作出不同行为</code>。</p><p><code>阿里规范手册有言：</code>超过三层的if-else的逻辑判断代码可以使用卫语句（指在分支判断中提前返回）、策略模式、状态模式来实现，其中卫语句示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">today</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isBusy()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;change time.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isFree()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;go to travel.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码对比演示"><a href="#代码对比演示" class="headerlink" title="代码对比演示"></a>代码对比演示</h3><p><strong>条件判断对象属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">&quot;Happy&quot;</span>.equals(zhangSan.getState()))&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;跑着去学校&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;Sad&quot;</span>.equals(zhangSan.getState()))&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;走着去学校&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;Sick&quot;</span>.equals(zhangSan.getState()))&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;病了不去学校&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>状态模式改造</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StatePattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">zhangSan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        zhangSan.changeState(<span class="keyword">new</span> <span class="title class_">Happy</span>());</span><br><span class="line">        zhangSan.howToGo(); <span class="comment">// 跑着去学校</span></span><br><span class="line">        zhangSan.changeState(<span class="keyword">new</span> <span class="title class_">Sad</span>());</span><br><span class="line">        zhangSan.howToGo(); <span class="comment">// 走着去学校</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">State</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">goSchool</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Happy</span> <span class="keyword">implements</span> <span class="title class_">State</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">goSchool</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跑着去学校&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sad</span> <span class="keyword">implements</span> <span class="title class_">State</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">goSchool</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;走着去学校&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sick</span> <span class="keyword">implements</span> <span class="title class_">State</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">goSchool</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;病了不去学校&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeState</span><span class="params">(State state)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">howToGo</span><span class="params">()</span>&#123;</span><br><span class="line">        state.goSchool();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>改用枚举</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StatePattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Student.Happy.howToGo();</span><br><span class="line">        Student.Sad.howToGo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">State</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">goSchool</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Happy</span> <span class="keyword">implements</span> <span class="title class_">State</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">goSchool</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跑着去学校&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sad</span> <span class="keyword">implements</span> <span class="title class_">State</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">goSchool</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;走着去学校&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sick</span> <span class="keyword">implements</span> <span class="title class_">State</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">goSchool</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;病了不去学校&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    Happy(<span class="keyword">new</span> <span class="title class_">Happy</span>()),</span><br><span class="line"></span><br><span class="line">    Sad(<span class="keyword">new</span> <span class="title class_">Sad</span>()),</span><br><span class="line"></span><br><span class="line">    Sick(<span class="keyword">new</span> <span class="title class_">Sick</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line"></span><br><span class="line">    Student(State state) &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">howToGo</span><span class="params">()</span>&#123;</span><br><span class="line">        state.goSchool();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://qn.mfei.fun/img/~%60MMWQC6YI5N$N_RZM$9R%60S.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;状态模式（State Pattern）：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。其别名为状态对象（Objec</summary>
      
    
    
    
    <category term="设计模式" scheme="https://spencedou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://spencedou.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="状态模式" scheme="https://spencedou.github.io/tags/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="https://spencedou.github.io/2021/03/22/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://spencedou.github.io/2021/03/22/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-03-22T08:40:25.000Z</published>
    <updated>2022-09-19T07:22:23.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="了解观察者模式"><a href="#了解观察者模式" class="headerlink" title="了解观察者模式"></a>了解观察者模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>观察者模式（Observer Pattern）。定义对象间的一种<code>一对多的依赖关系</code>，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>张三欠了很多人钱，债主每天来要钱对谁都不好。于是就可以让张三有钱时主动通知债主，没钱时就让债主等着（债主就是观察者，观察张三有没有钱）。于是观察者模式又叫<code>发布者模式</code>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 张三为借钱者</span></span><br><span class="line">        <span class="type">Debit</span> <span class="variable">zhangSan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DebitImpl</span>();</span><br><span class="line">        <span class="comment">// 向老板借钱</span></span><br><span class="line">        zhangSan.borrow(<span class="keyword">new</span> <span class="title class_">Boss</span>());</span><br><span class="line">        <span class="comment">// 向朋友借钱</span></span><br><span class="line">        zhangSan.borrow(<span class="keyword">new</span> <span class="title class_">Friend</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自行改变判断state为true时（有钱后）通知还钱</span></span><br><span class="line">        zhangSan.notifyCreadits();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 借贷者接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Debit</span>&#123;</span><br><span class="line">    <span class="comment">// 向贷款方借钱</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">borrow</span><span class="params">(Credit credit)</span>;</span><br><span class="line">    <span class="comment">// 通知债主自己要还钱</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyCreadits</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 贷款者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DebitImpl</span> <span class="keyword">implements</span> <span class="title class_">Debit</span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个数据结构存放这些债主</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Credit&gt; allCredits = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 当为true时表示有钱，可以通知还钱</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">state</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">borrow</span><span class="params">(Credit credit)</span> &#123;</span><br><span class="line">        <span class="comment">// 每借一个人的钱就把这个人存到集合中去</span></span><br><span class="line">        allCredits.add(credit);</span><br><span class="line">        System.out.println(<span class="string">&quot;张三借钱！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyCreadits</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 还钱时直接遍历集合通知还钱</span></span><br><span class="line">        allCredits.forEach(credit -&gt; credit.takeMoney());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 贷款方（债主）接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Credit</span>&#123;</span><br><span class="line">    <span class="comment">// 债主要钱</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">takeMoney</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boss</span> <span class="keyword">implements</span> <span class="title class_">Credit</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">takeMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Boss得到偿还&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Friend</span> <span class="keyword">implements</span> <span class="title class_">Credit</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">takeMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Friend得到偿还&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://qn.mfei.fun/img/%7DBZ6CUEI4CJWAZASBC54W1K.png" alt="img"></p><h2 id="观察者模式应用"><a href="#观察者模式应用" class="headerlink" title="观察者模式应用"></a>观察者模式应用</h2><h3 id="情景使用——天气预报"><a href="#情景使用——天气预报" class="headerlink" title="情景使用——天气预报"></a>情景使用——天气预报</h3><p>描述：气象站想要把自己测量的温度、湿度、天气等信息以公告形式发布出去（如：自己的官网或QQ、微信等第三方），那么他就需要设计开放型的的API（提供温度、湿度、气压等接口），便于其他第三方也能接入气象站获取数据。测量数据更新时要能实时的通知给第三方。</p><p><img src="http://qn.mfei.fun/img/image-20220919152121253.png" alt="image-20220919152121253"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;了解观察者模式&quot;&gt;&lt;a href=&quot;#了解观察者模式&quot; class=&quot;headerlink&quot; title=&quot;了解观察者模式&quot;&gt;&lt;/a&gt;了解观察者模式&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定</summary>
      
    
    
    
    <category term="设计模式" scheme="https://spencedou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://spencedou.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="观察者模式" scheme="https://spencedou.github.io/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Docker运行Nginx容器</title>
    <link href="https://spencedou.github.io/2020/10/27/Docker%E8%BF%90%E8%A1%8CNginx%E5%AE%B9%E5%99%A8/"/>
    <id>https://spencedou.github.io/2020/10/27/Docker%E8%BF%90%E8%A1%8CNginx%E5%AE%B9%E5%99%A8/</id>
    <published>2020-10-27T10:15:39.000Z</published>
    <updated>2022-09-19T07:19:08.440Z</updated>
    
    <content type="html"><![CDATA[<p><strong>整体步骤：</strong></p><ol><li>创建并运行容器，且在nginx容器创建时向宿主机挂载出一个空文件夹。</li><li>进入容器将conf.d移动到向宿主机挂载的空文件夹中。</li><li>进入向宿主机挂载的空文件夹中，并将conf.d软连接到其原本所在的目录。</li></ol><h2 id="拉取nginx镜像"><a href="#拉取nginx镜像" class="headerlink" title="拉取nginx镜像"></a>拉取nginx镜像</h2><ul><li>先<code>推荐个网站</code>，从你开始使用docker就要必备的——<a href="https://hub.docker.com/">DockerHub</a>。一句话说明就是一个镜像大全。</li><li><code>寻找镜像资源</code>的话就在上面那个网站上搜索就行，版本、下载方式自选。</li><li><code>拉取镜像</code>的话在上面那个网站搜索后，拉取命令<code>docker pull nginx</code>直接给你了，且nginx无须在意版本，直接拉last版本即可。<img src="http://qn.mfei.fun/img/image-20220919151601854.png" alt="image-20220919151601854"></li></ul><h2 id="创建配置路径"><a href="#创建配置路径" class="headerlink" title="创建配置路径"></a>创建配置路径</h2><p>如果你选择容器管理nginx服务的话，请先不要着急启动，先<code>在宿主机新建一个文件夹</code>，这将是你之后<code>存放nginx配置</code>的地方。</p><h2 id="创建并启动容器"><a href="#创建并启动容器" class="headerlink" title="创建并启动容器"></a>创建并启动容器</h2><ul><li><p>控制台执行<code>docker images</code>检查镜像是否存在。</p></li><li><p>配置启动命令（创建容器很简单，但是想要好用，需要认真配置）</p><blockquote><p>最终命令：<code>docker run --name nginx-first -p 90:80 -v /var/dps/nginx:/nginx -d nginx</code></p><blockquote><p>解释：</p><p><code>docker run nginx</code>，为生成nginx镜像的容器。<br><code>--name nginx-first</code>，指定容器名称为nginx-first。<br><code>-p 90:80</code>，指将容器中80端口映射到宿主机90端口。</p><p><code>-v /var/dps/nginx:/nginx</code>，指将容器中nginx某一文件夹<a href="https://so.csdn.net/so/search?q=%E6%8C%82%E8%BD%BD&spm=1001.2101.3001.7020">挂载</a>到宿主机某一文件夹（左边为宿主机文件夹地址）。</p><p><code>-d</code>，表示后台运行该容器。</p></blockquote></blockquote></li></ul><h2 id="设置nginx配置"><a href="#设置nginx配置" class="headerlink" title="设置nginx配置"></a>设置nginx配置</h2><ul><li><p>将容器中nginx默认<code>conf.d配置文件夹移动到</code>启动容器命令中预设的<code>挂载目录</code>中。</p><blockquote><ol><li>查看容器<code>docker ps</code>，进入容器<code>docker exec -it [容器id] /bin/bash</code>。</li><li>cd到&#x2F;etc&#x2F;nginx目录中<code>cd /etc/nginx</code>。</li><li>再将该文件夹下conf.d文件夹移动到你预设的挂载目录中<code>rm /etc/nginx/conf.d /nginx</code>。</li></ol></blockquote></li><li><p>来到启动容器命令中预设的挂载目录中，<code>检查是否存在conf.d文件夹</code>。</p></li><li><p>在预设的挂载目录中，将conf.d文件夹软连接到其原本的位置<code>ln -s /nginx/conf.d /etc/nginx</code>。</p></li><li><p>此时即可在<code>宿主机的挂载目录中操作</code>nginx容器的default.conf文件或者<code>新增配置文件</code>了。</p></li></ul><h3 id="nginx配置文件在哪里？"><a href="#nginx配置文件在哪里？" class="headerlink" title="nginx配置文件在哪里？"></a>nginx配置文件在哪里？</h3><ul><li>nginx的配置文件默认是在<code>etc/nginx</code>文件夹下，该文件夹下有<code>nginx.conf</code>、<code>conf.d</code>两个配置文件夹，一般我们自定义的配置是要放在<code>conf.d</code>中的，故只需将<code>cong.d</code>挂载到宿主机即可。</li><li>如果你非想在自己去找找看，直接执行<code>docker run -d nginx</code></li></ul><h3 id="为什么不直接将nginx配置文件挂载出来？"><a href="#为什么不直接将nginx配置文件挂载出来？" class="headerlink" title="为什么不直接将nginx配置文件挂载出来？"></a>为什么不直接将nginx配置文件挂载出来？</h3><p>我们既然知道了容器中nginx的conf.d文件夹位置，为什么<code>不直接将其挂载出来</code>，反而要多此一举搞个<a href="https://so.csdn.net/so/search?q=%E8%BD%AF%E8%BF%9E%E6%8E%A5&spm=1001.2101.3001.7020">软连接</a>？其实也不是不行，只是如果我们一上来就拿个空文件夹来挂载conf.d文件夹，会造成<code>覆盖</code>，使容器中conf.d文件夹也变成空文件夹，<code>间接删除了原有的default.conf文件</code>，我们还要从其他地方拷一个default.conf过来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;整体步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建并运行容器，且在nginx容器创建时向宿主机挂载出一个空文件夹。&lt;/li&gt;
&lt;li&gt;进入容器将conf.d移动到向宿主机挂载的空文件夹中。&lt;/li&gt;
&lt;li&gt;进入向宿主机挂载的空文件夹中，并将con</summary>
      
    
    
    
    <category term="运维" scheme="https://spencedou.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="docker" scheme="https://spencedou.github.io/tags/docker/"/>
    
    <category term="nginx" scheme="https://spencedou.github.io/tags/nginx/"/>
    
    <category term="服务器" scheme="https://spencedou.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb——Servlet</title>
    <link href="https://spencedou.github.io/2020/10/09/JavaWeb%E2%80%94%E2%80%94Servlet/"/>
    <id>https://spencedou.github.io/2020/10/09/JavaWeb%E2%80%94%E2%80%94Servlet/</id>
    <published>2020-10-09T13:28:17.000Z</published>
    <updated>2022-09-19T07:11:59.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Servlet简介"><a href="#Servlet简介" class="headerlink" title="Servlet简介"></a>Servlet简介</h2><p><span style="color:red">Servlet通常指的就是实现Servlet接口的java类，通过对http请求进行处理并响应结果，用以开发动态web。</span></p><ul><li><code>Servlet</code>是sun公司<code>开发动态web的一门技术</code>。</li><li>通常把<code>实现了Servlet接口</code>的Java程序叫做Servlet。</li><li>Servlet在sun公司有两个默认实现类<code>HttpServlet</code>和<code>GenericServlet</code></li><li>HttpServlet类继承GenericServlet类，GenericServlet类继承Servlet接口，故我们的类只需要继承<code>HttpServlet</code>类即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// ServletOutputStream outputStream = resp.getOutputStream();</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter(); <span class="comment">// 响应流</span></span><br><span class="line">        writer.println(<span class="string">&quot;Hello,Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Servlet工作原理"><a href="#Servlet工作原理" class="headerlink" title="Servlet工作原理"></a>Servlet工作原理</h2><p><img src="http://qn.mfei.fun/img/I2@9KQ%7B9UPO[@%Q%FR1%7D~AQ.png" alt="img"></p><p>用户在上网时，由客户端浏览器<code>发送http请求</code>至服务器，服务器根据用户请求方式及地址从磁盘中<code>加载对应的Servlet程序文件</code>到Servlet容器。服务器<code>解析http请求为request对象</code>，<code>转发request对象到相应Servlet中</code>进行处理，Servlet<code>处理后返回response对象</code>，服务器再<code>将response对象转为http响应</code>，响应给客户端浏览器。</p><h2 id="编写Servlet映射"><a href="#编写Servlet映射" class="headerlink" title="编写Servlet映射"></a>编写Servlet映射</h2><p><span style="color:red">要通过浏览器访问java程序，而浏览器需要连接web服务器，所以需要在web服务中注册Servlet，还要给它一个浏览器能够访问的路径。</span></p><h4 id="注册方式一"><a href="#注册方式一" class="headerlink" title="注册方式一"></a>注册方式一</h4><p><code>@WebServlet注解</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test只是个名字而已，value为访问地址</span></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;test&quot;, value = &quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// ServletOutputStream outputStream = resp.getOutputStream();</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter(); <span class="comment">// 响应流</span></span><br><span class="line">        writer.println(<span class="string">&quot;Hello,Servlet&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注册方式二"><a href="#注册方式二" class="headerlink" title="注册方式二"></a>注册方式二</h4><p><code>web.xml</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-app&gt;</span><br><span class="line">  &lt;!--web.xml中是配置web的核心应用--&gt;</span><br><span class="line">  &lt;!--注册Servlet--&gt;</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;!--Servlet名字--&gt;</span><br><span class="line">    &lt;servlet-name&gt;SpenceServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;!--Servlet指向的类--&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.spence.HelloServlet&lt;/servlet-class&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!--一个Servlet对应一个Mapping：映射--&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;!--通过名字绑定一个Servlet--&gt;</span><br><span class="line">    &lt;servlet-name&gt;SpenceServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;!--该Servlet的请求地址--&gt;</span><br><span class="line">    &lt;url-pattern&gt;/spence&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>注意：<code>&lt;servlet-mapping&gt;</code>标签与<code>&lt;servlet&gt;</code>标签一一对应，且<code>&lt;servlet&gt;标签要在&lt;servlet-mapping&gt;标签上面</code>。</p><h2 id="Servlet核心对象"><a href="#Servlet核心对象" class="headerlink" title="Servlet核心对象"></a>Servlet核心对象</h2><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p><span style="color:red">ServletContext是上下文对象，用于管理整个web应用</span></p><p>web容器在启动时，会为每个web程序（每个Service）都创建一个对应的ServletContext对象，<code>它代表当前web应用</code>。但要注意，<code>每个web程序（Servlet类）中创建的ServletContext对象其实是同一个对象</code>，因此可通过ServletContext对象使得各个Servlet类中的数据互通共享（ServletContext对象凌驾于所有Servlet类之上，它是<code>由web容器（服务器）创建的</code>）。</p><h4 id="应用场景——资源共享"><a href="#应用场景——资源共享" class="headerlink" title="应用场景——资源共享"></a>应用场景——资源共享</h4><p><code>向ServletContext对象中存入数据</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> <span class="string">&quot;哥哥&quot;</span>;</span><br><span class="line">        <span class="comment">// 将一个数据以键值对形式保存在了 servletContext 中</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;userName&quot;</span>, userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>从ServletContext对象中取出对象</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> (String) servletContext.getAttribute(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        writer.println(userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="应用场景——获取初始化参数"><a href="#应用场景——获取初始化参数" class="headerlink" title="应用场景——获取初始化参数"></a>应用场景——获取初始化参数</h4><p><code>可在web.xml配置文件中写入一些初始化参数</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>jdbc_url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>通过ServletContext对象中getInitParameter方法读取初始化参数</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;jdbc_url&quot;</span>); <span class="comment">// 读入初始化参数</span></span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">    writer.println(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="应用场景——请求转发"><a href="#应用场景——请求转发" class="headerlink" title="应用场景——请求转发"></a>应用场景——请求转发</h4><p><span style="color:red">通过ServletContext对象中getRequestDispatcher方法写入转发请求路径，再通过RequestDispatcher对象的forward方法实现转发。相当于指明一个新的请求路径，把请求和响应参数传入到新的请求中（该种情况不同于重定向，不会改变浏览器页中URL地址）。</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">    <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> servletContext.getRequestDispatcher(<span class="string">&quot;/jdbc&quot;</span>); <span class="comment">// 转发的请求路径</span></span><br><span class="line">    requestDispatcher.forward(req, resp); <span class="comment">// 调用forward实现转发</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="应用场景——读取资源文件"><a href="#应用场景——读取资源文件" class="headerlink" title="应用场景——读取资源文件"></a>应用场景——读取资源文件</h4><p>想办法搞出一个文件流即可。</p><ul><li>在java目录下新建properties文件</li><li>在resources目录下新建properties文件</li></ul><p>发现：都被打包到了同一个路径下—&gt; class，我们俗称这个路径为classpath。</p><p><code>在resources目录下新建 db.properties 文件</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=root</span><br><span class="line">password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p><code>通过ServletContext对象中 getResourceAsStream 方法读取文件</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">    <span class="comment">// 通过 getResourceAsStream 方法读取文件  /WEB-INF/classes/db.properties 为打包后文件所在相对路径</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">iStream</span> <span class="operator">=</span> servletContext.getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>); <span class="comment">// File流为绝对路径，在线上不方便使用</span></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    prop.load(iStream);</span><br><span class="line">    <span class="comment">// 获取配置文件中信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">    writer.println(username +<span class="string">&quot;:&quot;</span>+ password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h3><p>web服务器收到客户端http请求后，针对该请求分别创建一个代表请求的HttpServletRequest对象，和一个<code>代表响应的HttpServletResponse对象</code>。</p><ul><li>如果要获取客户端请求过来的数据：去HttpServletRequest对象中找</li><li>如果要给客户端响应过去一些数据：向HttpServletRequest对象添加</li></ul><p><code>负责向浏览器发送数据的方法：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 平常的流</span></span><br><span class="line">ServletOutputStream <span class="title function_">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"><span class="comment">// 字符</span></span><br><span class="line">PrintWriter <span class="title function_">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure><p><code>负责向浏览器发送一些响应头的方法</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置响应的编码</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setCharacterEncoding</span><span class="params">(String var1)</span>;</span><br><span class="line"><span class="comment">// 设置响应字符串长度</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentLength</span><span class="params">(<span class="type">int</span> var1)</span>;</span><br><span class="line"><span class="comment">// 设置流长度</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentLengthLong</span><span class="params">(<span class="type">long</span> var1)</span>;</span><br><span class="line"><span class="comment">// 设置类型</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentType</span><span class="params">(String var1)</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="应用场景——-向浏览器输出消息"><a href="#应用场景——-向浏览器输出消息" class="headerlink" title="应用场景—— 向浏览器输出消息"></a>应用场景—— 向浏览器输出消息</h4><p>getOutputStream、getWriter等</p><h4 id="应用场景——验证码功能"><a href="#应用场景——验证码功能" class="headerlink" title="应用场景——验证码功能"></a>应用场景——验证码功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">// 让浏览器3秒自动刷新一次</span></span><br><span class="line">    resp.setHeader(<span class="string">&quot;refresh&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">    <span class="comment">// 在内存中创建一个图片</span></span><br><span class="line">    <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(<span class="number">80</span>, <span class="number">20</span>, BufferedImage.TYPE_INT_BGR);</span><br><span class="line">    <span class="comment">// 得到图片</span></span><br><span class="line">    <span class="type">Graphics2D</span> <span class="variable">g</span> <span class="operator">=</span> (Graphics2D)image.getGraphics(); <span class="comment">// 画笔</span></span><br><span class="line">    <span class="comment">// 设置画笔颜色</span></span><br><span class="line">    g.setColor(Color.PINK);</span><br><span class="line">    <span class="comment">// 给图片填充数据</span></span><br><span class="line">    g.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="comment">// 给图片写入数据</span></span><br><span class="line">    g.setColor(Color.BLUE);</span><br><span class="line">    g.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="literal">null</span>, Font.BOLD, <span class="number">20</span>));</span><br><span class="line">    g.drawString(makeNum(), <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="comment">// 告诉浏览器，这个请求用图片的方式打开</span></span><br><span class="line">    resp.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    <span class="comment">// 不让浏览器缓存</span></span><br><span class="line">    resp.setDateHeader(<span class="string">&quot;expires&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">    resp.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">    resp.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">    <span class="comment">// 把图片写给浏览器</span></span><br><span class="line">    ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, resp.getOutputStream());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成随机数</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">makeNum</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> random.nextInt(<span class="number">9999999</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">7</span>-num.length(); i++) &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString()+num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="应用场景——下载文件"><a href="#应用场景——下载文件" class="headerlink" title="应用场景——下载文件"></a>应用场景——下载文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 获取要下载文件的路径</span><br><span class="line"><span class="number">2.</span> 下载的文件名</span><br><span class="line"><span class="number">3.</span> 让浏览器能够支持所需下载的东西</span><br><span class="line"><span class="number">4.</span> 创建下载文件的输入流</span><br><span class="line"><span class="number">5.</span> 创建缓冲区</span><br><span class="line"><span class="number">6.</span> 获取OutputStream对象</span><br><span class="line"><span class="number">7.</span> 将FileOutputStream流写入到buffer缓冲区，使用OutputStream将缓冲区中的数据输出到客户端</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 获取要下载文件的路径</span></span><br><span class="line">    <span class="comment">// String realPath = this.getServletContext().getRealPath(&quot;/pic_01.png&quot;);</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="string">&quot;D:\\IDEA_WorkSpace\\my-demo\\maven-03-web\\web-03-test\\src\\main\\resources\\static\\img\\pic_01.png&quot;</span>;</span><br><span class="line">    <span class="comment">// 2. 下载的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> realPath.substring(realPath.lastIndexOf(<span class="string">&quot;//&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 3. 让浏览器能够支持所需下载的东西</span></span><br><span class="line">    <span class="comment">// resp.setHeader(&quot;content-disposition&quot;, &quot;attachment;fileName&quot;+fileName);</span></span><br><span class="line">    <span class="comment">// 中文文件名用 URLEncoder.encode 编码，否则有可能乱码</span></span><br><span class="line">    resp.setHeader(<span class="string">&quot;content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span>+ URLEncoder.encode(fileName, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">    <span class="comment">// 4. 创建下载文件的输入流</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="comment">// 5. 创建缓冲区</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">// 6. 获取OutputStream对象</span></span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line">    <span class="comment">// 7. 将FileOutputStream流写入到buffer缓冲区，使用OutputStream将缓冲区中的数据输出到客户端</span></span><br><span class="line">    <span class="keyword">while</span> ((len = fileInputStream.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        outputStream.write(buffer,<span class="number">0</span> , len);</span><br><span class="line">    &#125;</span><br><span class="line">    fileInputStream.close();</span><br><span class="line">    outputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="应用场景——实现重定向"><a href="#应用场景——实现重定向" class="headerlink" title="应用场景——实现重定向"></a>应用场景——实现重定向</h4><p><span style="color:red">一个web资源收到客户端请求后，他会通知客户端去访问另外一个web资源，这个过程叫重定向（该过程不同于转发，客户端浏览器中URL会发生改变）。</span></p><p><code>常见场景</code>：用户登录<br><code>重定向方法</code>：void sendRedirect(String var1) throws IOException;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">// 重定向</span></span><br><span class="line">    resp.sendRedirect(<span class="string">&quot;/test3/image&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * resp.sendRedirect(&quot;/test3/image&quot;);</span></span><br><span class="line"><span class="comment">     * 等价于</span></span><br><span class="line"><span class="comment">     * resp.setHeader(&quot;Location&quot;, &quot;/test3/image&quot;);</span></span><br><span class="line"><span class="comment">     * resp.setStatus(302);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h3><p>HttpServletRequest代表客户端请求，用户通过Http协议访问服务器，<code>Http请求中的所有信息会被封装到HttpServletRequest</code>，通过这个HttpServletRequest的方法，获得客户端的所有信息。</p><h4 id="应用场景——获取前端传递的参数、请求转发"><a href="#应用场景——获取前端传递的参数、请求转发" class="headerlink" title="应用场景——获取前端传递的参数、请求转发"></a>应用场景——获取前端传递的参数、<strong>请求转发</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">getParameter</span><span class="params">(String var1)</span>;</span><br><span class="line">String[] getParameterValues(String var1);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    String[] hobbies = req.getParameterValues(<span class="string">&quot;hobbies&quot;</span>);</span><br><span class="line"><span class="comment">// 这里的 / 代表当前的web应用</span></span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(req, resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Servlet简介&quot;&gt;&lt;a href=&quot;#Servlet简介&quot; class=&quot;headerlink&quot; title=&quot;Servlet简介&quot;&gt;&lt;/a&gt;Servlet简介&lt;/h2&gt;&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;Servlet通常指的就是实现Ser</summary>
      
    
    
    
    <category term="web开发" scheme="https://spencedou.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaWeb" scheme="https://spencedou.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>java.lang.NoClassDefFoundError javaxservlethttpHttpServlet</title>
    <link href="https://spencedou.github.io/2020/09/30/java.lang.NoClassDefFoundError%20javaxservlethttpHttpServlet/"/>
    <id>https://spencedou.github.io/2020/09/30/java.lang.NoClassDefFoundError%20javaxservlethttpHttpServlet/</id>
    <published>2020-09-30T13:12:52.000Z</published>
    <updated>2022-09-19T06:57:08.543Z</updated>
    
    <content type="html"><![CDATA[<p><code>java.lang.NoClassDefFoundError: javax/servlet/http/HttpServlet</code></p><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>最近对JavaWeb进行了简单复习，在对照以往笔记写好了一个<a href="https://so.csdn.net/so/search?q=Servlet&spm=1001.2101.3001.7020">Servlet</a>服务时发现无法启动该项目服务。针对<code>java.lang.NoClassDefFoundError: javax/servlet/http/HttpServlet</code>这个问题，百度结果有让<code>导jar包</code>的、有让<code>提升IDEA版本</code>的、有让<code>重装Tomcat</code>的，也有让<code>修改项目中web.xml</code>的，有些方法一看就不靠谱，于是我便尝试修改项目中web.<a href="https://so.csdn.net/so/search?q=xml&spm=1001.2101.3001.7020">xml</a>版本，发现依旧不行，但从中却获得了灵感。</p><h3 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h3><p>Tomcat原码是基于java，于是乎便联想到了<code>Servlet</code>、<code>Tomcat</code>、<code>jdk</code>之间是否存在着<code>版本关联</code>。果然在对Tomcat配置文件以及新建web项目时引入Servlet依赖版本分析时发现了问题。</p><h4 id="jdk与Tomcat"><a href="#jdk与Tomcat" class="headerlink" title="jdk与Tomcat"></a>jdk与Tomcat</h4><p>目前项目开发常用的jdk版本依旧为1.8，而我最先选用的Tomcat版本为10.0.12，那么问题来了，<code>2014</code>年发布的<code>jdk1.8</code>和<code>2020</code>年发布的<code>Tomcat10.0.0</code>他们它们可以兼容吗？我们新建项目一步步的看：</p><p><img src="http://qn.mfei.fun/img/image-20220919145214496.png" alt="image-20220919145214496"></p><p>不难发现<code>jdk1.8的Servlet支持版本为4.0.1</code></p><p><img src="http://qn.mfei.fun/img/Q%A%7B[VOX5%7BPWX@I$~9GODLN.hc" alt="img"></p><p>而我们去Tomcat下载目录里看10版本以上的Tomcat所使用的的Servlet版本</p><p><img src="http://qn.mfei.fun/img/BJ$K_H2%7BW%7DWWP$QV7W%DK1E.hc" alt="img"></p><p><img src="http://qn.mfei.fun/img/image-20220919145326075.png" alt="image-20220919145326075"></p><p>得出结论，<code>jdk1.8所依赖的Servlet版本为4.0，而Tomcat10.0.12依赖的Servlet版本为5.0，二者不匹配！</code><br>此时我们尝试将jdk版本由8上调至9：</p><p><img src="http://qn.mfei.fun/img/image-20220919145352384.png" alt="image-20220919145352384"></p><p>发现jdk对Servlet依赖版本变成了5.0.0。但是改动jdk版本并不是我们的本意，此时就需要<code>考虑降低Tomcat配置，使其匹配当前jdk</code>。<br>观察Tomcat9.0.54版本的配置文件：</p><p><img src="http://qn.mfei.fun/img/$Y%60ECGS$JBA0C%5DL8W~JR63J.png" alt="img"></p><p><img src="http://qn.mfei.fun/img/YHR@ZEQRP8HE0N4VDV0JG68.hc" alt="img"></p><p>发现Tomcat9.0.54版本所依赖的Servlet版本为4.0</p><h3 id="解决问题："><a href="#解决问题：" class="headerlink" title="解决问题："></a>解决问题：</h3><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><p><code>降低Tomcat版本</code>使其依赖的Servlet版本与jdk所依赖的Servlet版本相匹配。</p><p><img src="http://qn.mfei.fun/img/image-20220919145605802.png" alt="image-20220919145605802"></p><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><p><code>提升jdk版本</code>，目的同样是使Tomcat依赖的Servlet版本与jdk所依赖的Servlet版本相匹配</p><p><img src="http://qn.mfei.fun/img/image-20220919145629935.png" alt="image-20220919145629935"></p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>在解决此问题时尽可能不要改动jdk版本。另外为了避免不必要麻烦，<code>项目中的web.xml头文件尽可能和Tomcat保持一致</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--此处为Tomcat9.0.54版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;java.lang.NoClassDefFoundError: javax/servlet/http/HttpServlet&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="web开发" scheme="https://spencedou.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="服务器" scheme="https://spencedou.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="tomcat" scheme="https://spencedou.github.io/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>startup.bat启动Tomcat闪退问题原因及解决</title>
    <link href="https://spencedou.github.io/2020/09/29/startup.bat%E5%90%AF%E5%8A%A8Tomcat%E9%97%AA%E9%80%80%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    <id>https://spencedou.github.io/2020/09/29/startup.bat%E5%90%AF%E5%8A%A8Tomcat%E9%97%AA%E9%80%80%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3/</id>
    <published>2020-09-29T09:30:08.000Z</published>
    <updated>2022-09-19T06:51:29.745Z</updated>
    
    <content type="html"><![CDATA[<h3 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h3><p>安装了Tomcat之后，开始用着还好好的。<code>莫名其妙</code>的就很突然出现了一些玄学问题，某一次开始我双击了<code>startup.bat</code>启动Tomcat时我的黑窗口就很不给面子的运行着运行着就<code>闪退</code>了，隐约间能看到个异常，可刚看清楚一个<code>caused by...</code>黑窗口就已经关闭了。经历了重启电脑等常规解决问题的思路后依旧无法解决。</p><h3 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h3><p>既然问题出现在这个启动后闪退，那就去看一眼启动时都做了什么？用记事本打开<code>startup.bat</code>，会发现一行脚本是这样写的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set &quot;EXECUTABLE=%CATALINA_HOME%\bin\catalina.bat&quot;</span><br></pre></td></tr></table></figure><p>看得出它访问了本目录下的<code>catalina.bat</code>脚本，那就记事本打开<code>catalina.bat</code>，此时又发现里面出现了这些内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rem Get standard Java environment variables</span><br><span class="line">if exist &quot;%CATALINA_HOME%\bin\setclasspath.bat&quot; goto okSetclasspath</span><br><span class="line">echo Cannot find &quot;%CATALINA_HOME%\bin\setclasspath.bat&quot;</span><br><span class="line">echo This file is needed to run this program</span><br><span class="line">goto end</span><br><span class="line">:okSetclasspath</span><br><span class="line">call &quot;%CATALINA_HOME%\bin\setclasspath.bat&quot; %1</span><br><span class="line">if errorlevel 1 goto end</span><br></pre></td></tr></table></figure><p>这说明<code>catalina.bat</code>又访问了该目录下的<code>setclasspath.bat</code>，而记事本打开<code>setclasspath.bat</code>后又发现它又访问了<code>catalina.bat</code>。</p><hr/><p>综上发现<code>startup.bat启动流程</code>为：<code>startup-&gt;catalina-&gt;setclasspath-&gt;catalina</code></p><p><img src="http://qn.mfei.fun/img/QQH2E%7B7[T[W9X%L@PK%7B1RFD.hc" alt="img"></p><h3 id="闪退原因："><a href="#闪退原因：" class="headerlink" title="闪退原因："></a>闪退原因：</h3><p>可见这三个文件一个都不能出问题。分析这三个文件得出闪退问题主要原因</p><h4 id="原因一：java环境变量出问题了"><a href="#原因一：java环境变量出问题了" class="headerlink" title="原因一：java环境变量出问题了"></a>原因一：java<a href="https://so.csdn.net/so/search?q=%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&spm=1001.2101.3001.7020">环境变量</a>出问题了</h4><p>从启动脚本中看得出Tomcat多次访问了环境变量信息，其中也包括java环境（毕竟Tomcat原码也是java啊）。故要先去<code>检查jdk的环境配置</code>。</p><p><strong>注意：</strong><code>CATALINA_HOME</code>是Tomcat的环境，你可以选择不配置，不过这样的话你就只能在bin目录下启动Tomcat了，换句话来讲，配置完Tomcat环境后你可以把<code>startup.bat</code>复制到其他地方双击启动。</p><h4 id="原因二：端口占用"><a href="#原因二：端口占用" class="headerlink" title="原因二：端口占用"></a>原因二：端口占用</h4><p>如果Tomcat已经被启动或者8080端口被占用，这自然是不允许的。</p><p>你可以直接访问<code>localhost:8080</code>看能否访问Tomcat，如果可以那就说明是已经开启过了的，你可以双击<code>shutdown.bat</code>进行关闭。</p><p>或者你可以在黑窗口中执行<code>netstat -ano | findstr &quot;8080&quot;</code>查看8080端口状态，如果是<code>TIME_WAIT</code>则说明未被占用。</p><h4 id="原因三：你的Tomcat不干净了"><a href="#原因三：你的Tomcat不干净了" class="headerlink" title="原因三：你的Tomcat不干净了"></a>原因三：你的Tomcat不干净了</h4><p>到现在还没解决，那就有可能是你所下载的Tomcat是一些<code>绿色版、无敌版、xx版</code>等阉货或畸形货。此时就可在记事本打开<code>startup.bat</code>，在脚本最后面一行加上<code>pause</code>，保存后启动进行断点调试了。（不一定非得像我图片中加在倒数第二行，最后一行应该也可以，只要不放在前面的逻辑中就行）。</p><p><img src="http://qn.mfei.fun/img/@UTBWFW8Z3]27P7OU7%FXQW.hc" alt="img"></p><p>此时启动效果和之前没有区别，只是出了问题后不再会立刻闪退，而是你在窗口中按任意键后才会退出。OK！现在你就研究属于你的bug吧（记得解决完问题后把pause删掉）！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;出现问题&quot;&gt;&lt;a href=&quot;#出现问题&quot; class=&quot;headerlink&quot; title=&quot;出现问题&quot;&gt;&lt;/a&gt;出现问题&lt;/h3&gt;&lt;p&gt;安装了Tomcat之后，开始用着还好好的。&lt;code&gt;莫名其妙&lt;/code&gt;的就很突然出现了一些玄学问题，某一次开始我双击了</summary>
      
    
    
    
    <category term="web开发" scheme="https://spencedou.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="服务器" scheme="https://spencedou.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="tomcat" scheme="https://spencedou.github.io/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置信息</title>
    <link href="https://spencedou.github.io/2020/09/15/Nginx%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/"/>
    <id>https://spencedou.github.io/2020/09/15/Nginx%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/</id>
    <published>2020-09-15T03:30:33.000Z</published>
    <updated>2022-09-19T06:46:13.851Z</updated>
    
    <content type="html"><![CDATA[<p>在nginx的文件目录<code>etc/nginx</code>下，有一个<code>nginx.conf</code>文件和一个<code>conf.d</code>文件夹。</p><h2 id="nginx-conf文件"><a href="#nginx-conf文件" class="headerlink" title="nginx.conf文件"></a><a href="https://so.csdn.net/so/search?q=nginx&spm=1001.2101.3001.7020">nginx</a>.conf文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log notice;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这个配置文件看得出以下信息：</p><ul><li>日志位置：&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</li><li>最大连接数（默认）：1024</li><li><code>文件引入断言：/etc/nginx/conf.d/*.conf</code></li></ul><h2 id="conf-d文件夹"><a href="#conf-d文件夹" class="headerlink" title="conf.d文件夹"></a>conf.d文件夹</h2><ul><li>在该文件夹下有一个<code>default.conf</code>文件为nginx默认配置</li><li>根据<code>nginx.conf</code>文件中的配置断言看得出，自定义配置也应当放在<code>conf.d</code>文件夹中</li></ul><h2 id="default-conf文件"><a href="#default-conf文件" class="headerlink" title="default.conf文件"></a>default.conf文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html/nginx_reload;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /index.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html/nginx_reload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">    # concurs with nginx&#x27;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此结合<code>nginx.conf</code>文件和<code>default.conf</code>文件不难看出nginx的配置结构为以下这种情况：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#全局块</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">#events块</span><br><span class="line">events &#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#http块</span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">#http全局块</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    #server块</span><br><span class="line">    server</span><br><span class="line">    &#123; </span><br><span class="line">    #server全局块</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">#location块</span><br><span class="line">        location [PATTERN]</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        location [PATTERN] </span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    #http全局块</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</li><li>events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li><li>http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</li><li>server块：配置虚拟主机的相关参数，一个http中可以有多个server</li><li>location块：配置请求的路由，以及各种页面的处理情况。</li></ul><h2 id="配置server块"><a href="#配置server块" class="headerlink" title="配置server块"></a>配置server块</h2><p>我们在部署项目时最常配置的就是如default.conf文件所示的server块的配置。基本就是<code>监听一个端口</code>，当请求nginx主机ip+端口时自然就进入了监听该端口的server；<code>监听一个地址</code>，该地址为当前server服务所在地址；<code>对请求路由</code>，即对请求的URL进行过滤匹配，访问具体的静态资源或服务。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        keepalive_requests 120; #单连接请求上限次数。</span><br><span class="line">        listen       4545;   #监听端口</span><br><span class="line">        server_name  127.0.0.1;   #监听地址       </span><br><span class="line">        location  ~*^.+$ &#123;       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br><span class="line">           #root path;  #根目录</span><br><span class="line">           #index vv.txt;  #设置默认页</span><br><span class="line">           proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表</span><br><span class="line">           deny 127.0.0.1;  #拒绝的ip</span><br><span class="line">           allow 172.18.5.54; #允许的ip           </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>路由静态资源</strong><br>当请求静态资源时，路由方式如下（因为nginx首页内容即为前端静态资源，故此出以default.nginx对首页资源的路由举例）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root   /usr/share/nginx/html/nginx_reload;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>路由服务地址</strong><br>当请求后端服务时，路由方式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">upstream myserver&#123;</span><br><span class="line">    server 172.17.0.4:8000;</span><br><span class="line">    server 172.17.0.5:8000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /api &#123;</span><br><span class="line">   proxy_pass http://myserver;</span><br><span class="line">   index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="root与alias"><a href="#root与alias" class="headerlink" title="root与alias"></a>root与alias</h2><p><strong>root</strong><br>root是用来指定访问资源的文件路径的，nginx会<code>将root的值和location的值进行拼接</code>，然后<code>再拼接上url剩余的部分及index指定的值</code>。</p><figure class="highlight plaintext"><figcaption><span>/login/&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /login/&#123;</span><br><span class="line">    root    /usr/local;</span><br><span class="line">    index    index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问结果如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/login --&gt; /usr/local/login/index.html</span><br><span class="line">/login/b --&gt; /usr/local/login/b/index.html</span><br></pre></td></tr></table></figure><p><strong>alias</strong><br>alias也是用来指定访问资源的文件路径的，但是nginx会<code>将alias的值替换location的值</code>，然后<code>再拼接上url剩余的部分及index指定的值</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /login/&#123;</span><br><span class="line">    alias    /usr/local;</span><br><span class="line">    index    index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问结果如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/login --&gt; /usr/local/index.html</span><br><span class="line">/login/b --&gt; /usr/local/b/index.html</span><br></pre></td></tr></table></figure><p>另外：alias指定的是文件夹路径，不能直接指定到具体的文件，否则会500，例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location /login/&#123;</span><br><span class="line">    alias    /usr/local/index.html;</span><br><span class="line">    #index    index.html;</span><br><span class="line">&#125;</span><br><span class="line">这种配置会让nginx报出500</span><br></pre></td></tr></table></figure><p>注意：<code>使用alias的时候，url后面如果加了斜杠，则下面的路径必须也加斜杠，否则403</code>。<br><strong>index</strong><br>index就是用来指定具体的资源的名字的，index可以指定多个资源的名字，第一个匹配不到，就会匹配第二个，直到匹配到为止。但是<code>location使用严格匹配的时候（加了个等于号），不能使用index，否则会导致root失效</code>，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location =/login/&#123;</span><br><span class="line">    root    /usr/local/;</span><br><span class="line">    index    index.html;</span><br><span class="line">&#125;</span><br><span class="line">当访问的url为/login/时，实际访问的资源为：nginx的默认document_root/login/index.html，使得root失效，值得注意的是nginx的默认document_root和我们root指定的是不一样的，所以最后会404</span><br></pre></td></tr></table></figure><p><strong>常见配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">########### 每个指令必须有分号结束。#################</span><br><span class="line">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span><br><span class="line">#worker_processes 2;  #允许生成的进程数，默认为1</span><br><span class="line">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span><br><span class="line">error_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span><br><span class="line">events &#123;</span><br><span class="line">    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on</span><br><span class="line">    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off</span><br><span class="line">    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span><br><span class="line">    worker_connections  1024;    #最大连接数，默认为512</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;   #文件扩展名与文件类型映射表</span><br><span class="line">    default_type  application/octet-stream; #默认文件类型，默认为text/plain</span><br><span class="line">    #access_log off; #取消服务日志    </span><br><span class="line">    log_format myFormat &#x27;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#x27;; #自定义格式</span><br><span class="line">    access_log log/access.log myFormat;  #combined为日志格式的默认值</span><br><span class="line">    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span><br><span class="line">    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span><br><span class="line">    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。</span><br><span class="line"></span><br><span class="line">    upstream mysvr &#123;   </span><br><span class="line">      server 127.0.0.1:7878;</span><br><span class="line">      server 192.168.10.121:3333 backup;  #热备</span><br><span class="line">    &#125;</span><br><span class="line">    error_page 404 https://www.baidu.com; #错误页</span><br><span class="line">    server &#123;</span><br><span class="line">        keepalive_requests 120; #单连接请求上限次数。</span><br><span class="line">        listen       4545;   #监听端口</span><br><span class="line">        server_name  127.0.0.1;   #监听地址       </span><br><span class="line">        location  ~*^.+$ &#123;       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br><span class="line">           #root path;  #根目录</span><br><span class="line">           #index vv.txt;  #设置默认页</span><br><span class="line">           proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表</span><br><span class="line">           deny 127.0.0.1;  #拒绝的ip</span><br><span class="line">           allow 172.18.5.54; #允许的ip           </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在nginx的文件目录&lt;code&gt;etc/nginx&lt;/code&gt;下，有一个&lt;code&gt;nginx.conf&lt;/code&gt;文件和一个&lt;code&gt;conf.d&lt;/code&gt;文件夹。&lt;/p&gt;
&lt;h2 id=&quot;nginx-conf文件&quot;&gt;&lt;a href=&quot;#nginx-conf文</summary>
      
    
    
    
    <category term="运维" scheme="https://spencedou.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="服务器" scheme="https://spencedou.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="Nginx" scheme="https://spencedou.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>正向代理与反向代理</title>
    <link href="https://spencedou.github.io/2020/08/27/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>https://spencedou.github.io/2020/08/27/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</id>
    <published>2020-08-27T08:40:25.000Z</published>
    <updated>2022-09-19T06:44:01.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题引出"><a href="#问题引出" class="headerlink" title="问题引出"></a>问题引出</h2><ol><li>当你想要访问一些网站时，发现时而能进时而又不能，就比如…<a href="https://pixivic.com/?VNK=90f826db">pixivic</a>、GitHub，或是想要访问YouTube等。此时你会怎么做？</li><li>我们的服务部署在服务器上，本可以通过主机IP、服务端口号直接访问，那为什么不直接让前端通过主机或者主机域名加端口访问呢？</li></ol><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p><strong>原理</strong>：代理服务器是<code>独立搭建</code>的，用户将自己的请求发送给代理服务器，代理服务器将客户请求发送给目标服务器，目标服务器将请求结果响应给代理服务器，代理服务器将响应信息返回给用户。</p><p>![img](<a href="http://qn.mfei.fun/img/~A8%7D$[[_ZGEFJVI">http://qn.mfei.fun/img/~A8}$[[_ZGEFJVI</a>(Q</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题引出&quot;&gt;&lt;a href=&quot;#问题引出&quot; class=&quot;headerlink&quot; title=&quot;问题引出&quot;&gt;&lt;/a&gt;问题引出&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;当你想要访问一些网站时，发现时而能进时而又不能，就比如…&lt;a href=&quot;https://pixivic.com</summary>
      
    
    
    
    <category term="运维" scheme="https://spencedou.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="服务器" scheme="https://spencedou.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
</feed>
